setwd(users/hputnam/Desktop)
setwd(Users/hputnam/Desktop)
x =read.table(file="sym.Rtest.csv",header=T)
setwd
setwd (Desktop)
setwd(Users/Desktop)
setwd(hputnam/Users/Desktop)
getwd()
cd Desktop
setwd (Desktop)
setwd(~/Desktop)
setwd(~\Desktop)
source("/Users/hputnam/Desktop/sym.Rtest.csv")
x
x[1]
header =T
x
x=read.fwf(file="sym.Rtest.csv", col.names=c("Samples", "Species","Site", "Temp Range", "Clade A", "Clade C", "Clade D", "Clade F", "Clade G", "Clade I"))
x=read.fwf(file="sym.Rtest.csv",widths=c(10,10,10,10,10,10,10,10,10,10) + col.names=c("Samples", "Species","Site", "Temp Range", "Clade A", "Clade C", "Clade D", "Clade F", "Clade G", "Clade I"))
x=read.fwf(file="sym.Rtest.csv",widths=c(10,10,10,10,10,10,10,10,10,10), + col.names=c("Samples", "Species","Site", "Temp Range", "Clade A", "Clade C", "Clade D", "Clade F", "Clade G", "Clade I"))
x=read.fwf(file="sym.Rtest.csv",widths=c(10,20,10,10,10,10,10,10,10,10), + col.names=c("Samples", "Species","Site", "Temp Range", "Clade A", "Clade C", "Clade D", "Clade F", "Clade G", "Clade I"))
x=read.csv(file="sym.Rtest.csv")
install.packages("vegan")
install.packages("regex")
seq(from=0, to=1, by=0.1)
c(99:1)
seq(from=1, to=99, by=2)
rep(c('a''b' 'c'), times=4)
factor(rep(c('m', 'cm', 'mm'), each=3))
rnorm(5, mean=5, sd=1)
rep(c('a', 'b', 'c'), times=4)
a<-seq(from=3, to=15, by=3)
b<-rep(50, times=7)
c<-seq(from=20, to=40, by=10)
a
b
c
c(a,b,c)
d<-c(a,b,c)
d
newvec<-sqrt(d)*2
newvec
(newvec<-sqrt(d)*2)
newvec2<-sample((1:1000), size=15, replace=FALSE)
newvec3<-newvec+newvec2
(newvec3<-newvec+newvec2)
?t()
?anova()
?ordiplot
?ordiplot()
library("GUniFrac")
library("mgcv")
library("picante")
library("gplots")
library("RColorBrewer")
library("vegan")
library("ape")
library("GUniFrac")
library("mgcv")
library("picante")
library("gplots")
library("RColorBrewer")
library("vegan")
library("ape")
library("GUniFrac")
?ordiplto()
?ordiplot()
?text()
?rarefy()
rep(c(2005:2010, each=4))
rep(seq(from=2005, to=2010, by=1), each=4))
rep(seq(from=2005, to=2010, by=1), each=4)
rep(seq(from=2005, to=2010, by=1), each=12)
rep(c("J", "F", "M", "A", "M", "J", "J", "A" ,"S", "O", "N", "D", times=6))
rep(c("J", "F", "M", "A", "M", "J", "J", "A" ,"S", "O", "N", "D"), times=6)
?rnorm()
?rgamma()
rgamma(60, shape=2, scale=7)
rangam<-rgamma(72, shape=2, scale=7)
rgamma(72, shape=2, scale=7)
#a. a vector of the years 2005 through 2010 with each year repeated 12 times
year<-rep(seq(from=2005, to=2010, by=1), each=12)
#b. a vector of 12 character strings representing the 12 months of the year (e.g. J, F,M... or Jan, Feb, Mar... etc). Repeat the 12 months once for each year in 4a.
month<-rep(c("J", "F", "M", "A", "M", "J", "J", "A" ,"S", "O", "N", "D"), times=6)
#c. a vector of random numbers the same length as those in 4a) and 4b) sampled from a gamma distribution with shape = 2 and scale = 7.
rangam<-rgamma(72, shape=2, scale=7)
c(10,13,14,31,20,3,9)
c(6,7,90,30,21,7,8)
vec1<-c(10,13,14,31,20,3,9)
vec2<-c(6,7,90,30,21,7,8)
pmin(vec1,vec2)
vec3<-pmin(vec1,vec2)
pmax(vec1,vec2)
sort(vec1, decreasing=TRUE)
set.seed(99)
sample((850:900), size=20, replace=FALSE)
(sample((850:900), size=20, replace=FALSE))
set.seed(99)
(sample((850:900), size=20, replace=FALSE))
set.seed(99)
vec5<-(sample((850:900), size=20, replace=FALSE))
vec5
?range()
range(vec5)
min(vec5)
max(vec5)
sd(vec5)
899-853
order(vec5)
max(order(vec5))-min(order(vec5))
origVec <-seq(from=0, to=12, by=0.2)
origVec
origVec <-seq(from=0, to=2, by=0.2)
origVec
?subset()
Vec1 <-origVec[1:8]
Vec1
Vec2 <-origVec(subset(>=0.4 & <=1))
Vec2 <-origVec(substring(>=0.4 & <=1))
Vec2 <-subset(origVec >=0.4 & <=1)
Vec2 <-subset(origVec, origVec>=0.4 & origVec<=1)
Vec2
Vec3 <-subset(origVec, origVec<0.4 | origVec>1.6)
Vec3
Vec4 <-subset(origVec, origVec<1) <-5
Vec4 <-subset(origVec, origVec<1)
Vec4
Vec4 <-c(origVec, origVec<1) <-5
Vec4 <-[subset(origVec, origVec<1)] <-5
Vec4 <-subset[(origVec, origVec<1)] <-5
?ifelse()
Vec4 <- ifelse(origVec<1, yes=5)
Vec4 <- ifelse(origVec<1, yes=5, no=origVec)
Vec4
Vec5 <-c(54, 67, 89, 90, 34, 12, 22)
Vec5
Vec6 <-c(45, 40, 54, 89, 90, 99)
#b. In what position is the maximum of each vector?
pmax(Vec5, Vec6)
(pmax(Vec5, Vec6))
?pmax()
pmax(Vec5, Vec6)
max <-pmax(Vec5, Vec6)
max
max(Vec5, Vec6)
max <-[max(Vec5, Vec6)]
max <-which(max(Vec5, Vec6))
max <-which(max(Vec5))
max
?identical()
identical(Vec5, Vec6)
ident <-identical(Vec5, Vec6)
ident
Un <-union(Vec5, Vec6)
Un
x <- c(9.45, 8.78, 0.93, 0.47, 0.24, 0.12)
y <- c(10.72, 10.56, 10.35, 10.10, 9.13, 6.72)
z <- c(7.578, 7.456, 6.956, 6.712, 4.832, 3.345)
plot(x, y, col='blue', pch=16, xlab= 'x', ylab='y, z')
points(x, z, col='red', pch=17)
library(plotrix)
axis.break(1,2,style="slash")
?axis.break
x <- c(A, B, C, D, E, F, G, H, I)
y <- c(10.72, 10.56, 10.35, 10.10, 9.13, 6.72)
z <- c(7.578, 7.456, 6.956, 6.712, 4.832, 3.345)
plot(x, y, col='blue', pch=16, xlab= 'x', ylab='Number of OTUs')
points(x, z, col='red', pch=17)
library(plotrix)
axis.break(2,2,style="slash")
x <- c("A", "B", "C", "D", "E", "F", "G", "H", "I")
y <- c(10.72, 10.56, 10.35, 10.10, 9.13, 6.72)
z <- c(7.578, 7.456, 6.956, 6.712, 4.832, 3.345)
plot(x, y, col='blue', pch=16, xlab= 'x', ylab='Number of OTUs')
points(x, z, col='red', pch=17)
library(plotrix)
axis.break(2,2,style="slash")
x <- c("A", "B", "C", "D", "E", "F", "G", "H", "I")
y <- c(74, 29, 420, 39, 14, 50, 9, 12, 4)
plot(x, y, col='blue', pch=16, xlab= 'x', ylab='Number of OTUs')
points(x, y, col='red', pch=17)
library(plotrix)
axis.break(2,2,style="slash")
x <- c("A", "B", "C", "D", "E", "F", "G", "H", "I")
y <- c(74, 29, 420, 39, 14, 50, 9, 12, 4)
plot(x, y, ylin=450, col='blue', pch=16, xlab= 'x', ylab='Number of OTUs')
points(x, y, col='red', pch=17)
library(plotrix)
axis.break(2,2,style="slash")
x <- c("A", "B", "C", "D", "E", "F", "G", "H", "I")
y <- c(74, 29, 420, 39, 14, 50, 9, 12, 4)
plot(x, y, ylim=450, xlim=10 col='blue', pch=16, xlab= 'x', ylab='Number of OTUs')
points(x, y, col='red', pch=17)
library(plotrix)
axis.break(2,2,style="slash")
x <- c("A", "B", "C", "D", "E", "F", "G", "H", "I")
y <- c(74, 29, 420, 39, 14, 50, 9, 12, 4)
plot(x, y, ylim=450, xlim=10, col='blue', pch=16, xlab= 'x', ylab='Number of OTUs')
points(x, y, col='red', pch=17)
library(plotrix)
axis.break(2,2,style="slash")
x <- c("A", "B", "C", "D", "E", "F", "G", "H", "I")
y <- c(74, 29, 420, 39, 14, 50, 9, 12, 4)
plot(x, y, ylim=450, col='blue', pch=16, xlab= 'x', ylab='Number of OTUs')
points(x, y, col='red', pch=17)
library(plotrix)
axis.break(2,2,style="slash")
?ylim
?plot
library(ggplot2)
?geom_bar
y <- c(74, 29, 420, 39, 14, 50, 9, 12, 4)
geom_bar(y)
?aes
Sample <- c(1,2,3,4,5)
Scepter <- c(190000, 320000, 520000, 380000, 1100000)
Hemo <- c(185000, 300000, 450000, 450000, 950000)
comparision <- cbind(Sample, Scepter, Hemo)
View(comparision)
Sample <- c("Scepter", "Scepter", "Scepter", "Scepter", "Scepter", "Hemo","Hemo","Hemo","Hemo","Hemo")
Count <- c(190000, 320000, 520000, 380000, 1100000,185000, 300000, 450000, 450000, 950000)
comparision <- cbind(Sample, Count)
View(comparision)
t.test(Count ~Sample, daat=comparison)
Sample <- c("Scepter", "Scepter", "Scepter", "Scepter", "Scepter", "Hemo","Hemo","Hemo","Hemo","Hemo")
Count <- c(190000, 320000, 520000, 380000, 1100000,185000, 300000, 450000, 450000, 950000)
comparison <- cbind(Sample, Count)
t.test(Count ~Sample, daat=comparison)
bartlett.test(Count ~Sample, daat=comparison) #Bartlett's test for the HO that there is no differences in the variances, ie homogeneity of variance
Sample <- c("Scepter", "Scepter", "Scepter", "Scepter", "Scepter", "Hemo","Hemo","Hemo","Hemo","Hemo")
Count <- c(190000, 320000, 520000, 380000, 1100000,185000, 300000, 450000, 450000, 950000)
comparison <- cbind(Sample, Count)
t.test(Count ~Sample, data=comparison)
bartlett.test(Count ~Sample, data=comparison) #Bartlett's test for the HO that there is no differences in the variances, ie homogeneity of variance
Sample <- c("Scepter", "Scepter", "Scepter", "Scepter", "Scepter", "Hemo","Hemo","Hemo","Hemo","Hemo")
Count <- c(190000, 320000, 520000, 380000, 1100000,185000, 300000, 450000, 450000, 950000)
comparison <- cbind(Sample, Count)
t.test(Count ~Sample, data=comparison)
bartlett.test(Count ~Sample, data=comparison) #Bartlett's test for the HO that there is no differences in the variances, ie homogeneity of variance
t.test(Count ~Sample, daat=comparison)
t.test(Count ~Sample, data=comparison)
?t.test
t.test(Count ~Sample, data=comparison, paired = FALSE)
t.test(Count ~Sample, data=comparison, var.equal=TRUE)
t.test(Count ~Sample, data=comparison, var.equal=TRUE, paired=FALSE)
install.packages("swirl")
rm(list=ls())
library(swirl)
swirl()
citation()
##Geoduck and OA
#Data from Roberts et al NOAA OA
#last modified 20160212
#See Readme file for details
rm(list=ls()) # removes all prior objects
#Read in required libraries
##### Include Versions of libraries
library("car") #levenes test
library("ggplot2") #plotting
library("plotrix") #plotting
library("reshape") #data shaping
library("plyr") #splitting, applying, and combining data
library("seacarb") #seawater carbonate chemistry
library("vegan") #calculating distance matrices
#SWChem.csv
#############################################################
setwd("/Users/hputnam/MyProjects/Geoduck_Epi/RAnalysis/Data/") #set working directory
setwd("/Users/hputnam/MyProjects/Geoduck_Epi/RAnalysis/Data/") #set working directory
path <-("/Users/hputnam/MyProjects/Geoduck_Epi/RAnalysis/Data/")
#------------------------------------------------
#SEAWATER CHEMISTRY ANALYSIS FOR DISCRETE MEASUREMENTS
#Seawater chemistry table from simultaneous TA, pH, temperature and salinity measurements
SW.chem <- read.csv("BM_SWChem.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
#SEAWATER CHEMISTRY ANALYSIS FOR DISCRETE MEASUREMENTS
#Seawater chemistry table from simultaneous TA, pH, temperature and salinity measurements
SW.chem <- read.csv("SWChem.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
View(SW.chem)
#SEAWATER CHEMISTRY ANALYSIS FOR DISCRETE MEASUREMENTS
#Seawater chemistry table from simultaneous TA, pH, temperature and salinity measurements
SW.chem <- read.csv("SWChem.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
SW.chem <- read.csv("SWChem.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
#Calculate CO2 parameters using seacarb
carb.ouptput <- carb(flag=8, var1=SW.chem$pH.Total, var2=SW.chem$Corrected.TA/1000000, S= SW.chem$Salinity, T=SW.chem$Temperature, P=0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d") #calculate seawater chemistry parameters using seacarb
carb.ouptput$ALK <- carb.ouptput$ALK*1000000 #convert to µmol kg-1
carb.ouptput$CO2 <- carb.ouptput$CO2*1000000 #convert to µmol kg-1
carb.ouptput$HCO3 <- carb.ouptput$HCO3*1000000 #convert to µmol kg-1
carb.ouptput$CO3 <- carb.ouptput$CO3*1000000 #convert to µmol kg-1
carb.ouptput$DIC <- carb.ouptput$DIC*1000000 #convert to µmol kg-1
carb.ouptput <- cbind(SW.chem$Measure.Date,  SW.chem$Tank,	SW.chem$Treatment, carb.ouptput) #combine the sample information with the seacarb output
colnames(carb.ouptput) <- c("Date",  "Tank",  "Treatment",	"flag",	"Salinity",	"Temperature",	"Pressure",	"pH",	"CO2",	"pCO2",	"fCO2",	"HCO3",	"CO3",	"DIC", "TA",	"Aragonite.Sat", 	"Calcite.Sat") #Rename columns to describe contents
View(carb.ouptput)
#SEAWATER CHEMISTRY ANALYSIS FOR DISCRETE MEASUREMENTS
#Seawater chemistry table from simultaneous TA, pH, temperature and salinity measurements
SW.chem <- read.csv("SWChem.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
#Calculate CO2 parameters using seacarb
carb.ouptput <- carb(flag=8, var1=SW.chem$pH.Total, var2=SW.chem$Corrected.TA/1000000, S= SW.chem$Salinity, T=SW.chem$Temperature, P=0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d") #calculate seawater chemistry parameters using seacarb
carb.ouptput$ALK <- carb.ouptput$ALK*1000000 #convert to µmol kg-1
carb.ouptput$CO2 <- carb.ouptput$CO2*1000000 #convert to µmol kg-1
carb.ouptput$HCO3 <- carb.ouptput$HCO3*1000000 #convert to µmol kg-1
carb.ouptput$CO3 <- carb.ouptput$CO3*1000000 #convert to µmol kg-1
carb.ouptput$DIC <- carb.ouptput$DIC*1000000 #convert to µmol kg-1
carb.ouptput <- cbind(SW.chem$Measure.Date,  SW.chem$Tank,	SW.chem$Treatment, carb.ouptput) #combine the sample information with the seacarb output
colnames(carb.ouptput) <- c("Date",  "Tank",  "Treatment",	"flag",	"Salinity",	"Temperature",	"Pressure",	"pH",	"CO2",	"pCO2",	"fCO2",	"HCO3",	"CO3",	"DIC", "TA",	"Aragonite.Sat", 	"Calcite.Sat") #Rename columns to describe contents
View(carb.ouptput)
setwd("/Users/hputnam/MyProjects/Geoduck_Epi/RAnalysis/Data/") #set working directory
path <-("/Users/hputnam/MyProjects/Geoduck_Epi/RAnalysis/Data/")
#------------------------------------------------
#SEAWATER CHEMISTRY ANALYSIS FOR DISCRETE MEASUREMENTS
#Seawater chemistry table from simultaneous TA, pH, temperature and salinity measurements
SW.chem <- read.csv("SWChem.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
#Calculate CO2 parameters using seacarb
carb.ouptput <- carb(flag=8, var1=SW.chem$pH.Total, var2=SW.chem$Corrected.TA/1000000, S= SW.chem$Salinity, T=SW.chem$Temperature, P=0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d") #calculate seawater chemistry parameters using seacarb
carb.ouptput$ALK <- carb.ouptput$ALK*1000000 #convert to µmol kg-1
carb.ouptput$CO2 <- carb.ouptput$CO2*1000000 #convert to µmol kg-1
carb.ouptput$HCO3 <- carb.ouptput$HCO3*1000000 #convert to µmol kg-1
carb.ouptput$CO3 <- carb.ouptput$CO3*1000000 #convert to µmol kg-1
carb.ouptput$DIC <- carb.ouptput$DIC*1000000 #convert to µmol kg-1
carb.ouptput
write.table (carb.output, "Seawater_chemistry_table_Output.csv", sep=",", row.names = FALSE)
View(carb.ouptput)
View(carb.ouptput)
#Seawater chemistry table from simultaneous TA, pH, temperature and salinity measurements
SW.chem <- read.csv("SWChem.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
#Calculate CO2 parameters using seacarb
carb.ouptput <- carb(flag=8, var1=SW.chem$pH.Total, var2=SW.chem$Corrected.TA/1000000, S= SW.chem$Salinity, T=SW.chem$Temperature, P=0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d") #calculate seawater chemistry parameters using seacarb
View(carb.ouptput)
carb.ouptput$ALK <- carb.ouptput$ALK*1000000 #convert to µmol kg-1
carb.ouptput$CO2 <- carb.ouptput$CO2*1000000 #convert to µmol kg-1
carb.ouptput$HCO3 <- carb.ouptput$HCO3*1000000 #convert to µmol kg-1
carb.ouptput$CO3 <- carb.ouptput$CO3*1000000 #convert to µmol kg-1
carb.ouptput$DIC <- carb.ouptput$DIC*1000000 #convert to µmol kg-1
carb.ouptput
write.table(carb.output, "Seawater_chemistry_table_Output.csv", sep=",", row.names = FALSE)
View(carb.ouptput)
#Seawater chemistry table from simultaneous TA, pH, temperature and salinity measurements
SW.chem <- read.csv("SWChem.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
#Calculate CO2 parameters using seacarb
carb.ouptput <- carb(flag=8, var1=SW.chem$pH.Total, var2=SW.chem$TA/1000000, S= SW.chem$Salinity, T=SW.chem$Temperature, P=0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d") #calculate seawater chemistry parameters using seacarb
carb.ouptput$ALK <- carb.ouptput$ALK*1000000 #convert to µmol kg-1
carb.ouptput$CO2 <- carb.ouptput$CO2*1000000 #convert to µmol kg-1
carb.ouptput$HCO3 <- carb.ouptput$HCO3*1000000 #convert to µmol kg-1
carb.ouptput$CO3 <- carb.ouptput$CO3*1000000 #convert to µmol kg-1
carb.ouptput$DIC <- carb.ouptput$DIC*1000000 #convert to µmol kg-1
carb.ouptput
View(carb.ouptput)
carb.output <- carb(flag=8, var1=SW.chem$pH.Total, var2=SW.chem$TA/1000000, S= SW.chem$Salinity, T=SW.chem$Temperature, P=0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d") #calculate seawater chemistry parameters using seacarb
carb.output$ALK <- carb.ouptput$ALK*1000000 #convert to µmol kg-1
carb.output$CO2 <- carb.ouptput$CO2*1000000 #convert to µmol kg-1
carb.output$HCO3 <- carb.ouptput$HCO3*1000000 #convert to µmol kg-1
carb.output$CO3 <- carb.ouptput$CO3*1000000 #convert to µmol kg-1
carb.output$DIC <- carb.ouptput$DIC*1000000 #convert to µmol kg-1
carb.output
write.table(carb.output, "Seawater_chemistry_table_Output.csv", sep=",", row.names = FALSE)
View(carb.output)
SW.chem <- read.csv("SWChem.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
#Calculate CO2 parameters using seacarb
carb.output <- carb(flag=8, var1=SW.chem$pH.Total, var2=SW.chem$TA/1000000, S= SW.chem$Salinity, T=SW.chem$Temperature, P=0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d") #calculate seawater chemistry parameters using seacarb
View(carb.output)
##Geoduck and OA
#Data from Roberts et al NOAA OA
#last modified 20160212 H Putnam
rm(list=ls()) # removes all prior objects
#Read in required libraries
library("seacarb") #seawater carbonate chemistry
#Required Data files
#SWChem.csv
#############################################################
setwd("/Users/hputnam/MyProjects/Geoduck_Epi/RAnalysis/Data/") #set working directory
#------------------------------------------------
#SEAWATER CHEMISTRY ANALYSIS FOR DISCRETE MEASUREMENTS
#Seawater chemistry table from simultaneous TA, pH, temperature and salinity measurements
SW.chem <- read.csv("SWChem.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
#Calculate CO2 parameters using seacarb
carb.output <- carb(flag=8, var1=SW.chem$pH.Total, var2=SW.chem$TA/1000000, S= SW.chem$Salinity, T=SW.chem$Temperature, P=0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d") #calculate seawater chemistry parameters using seacarb
carb.output$ALK <- carb.ouptput$ALK*1000000 #convert to µmol kg-1
carb.output$CO2 <- carb.ouptput$CO2*1000000 #convert to µmol kg-1
carb.output$HCO3 <- carb.ouptput$HCO3*1000000 #convert to µmol kg-1
carb.output$CO3 <- carb.ouptput$CO3*1000000 #convert to µmol kg-1
carb.output$DIC <- carb.ouptput$DIC*1000000 #convert to µmol kg-1
carb.output
write.table(carb.output, "Seawater_Chemistry_Output.csv", sep=",", row.names = FALSE)
View(carb.output)
SW.chem <- read.csv("SWChem.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
#Calculate CO2 parameters using seacarb
carb.output <- carb(flag=8, var1=SW.chem$pH.Total, var2=SW.chem$TA/1000000, S= SW.chem$Salinity, T=SW.chem$Temperature, P=0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d") #calculate seawater chemistry parameters using seacarb
carb.output$ALK <- carb.ouptput$ALK*1000000 #convert to µmol kg-1
carb.output$CO2 <- carb.ouptput$CO2*1000000 #convert to µmol kg-1
carb.output$HCO3 <- carb.ouptput$HCO3*1000000 #convert to µmol kg-1
carb.output$CO3 <- carb.ouptput$CO3*1000000 #convert to µmol kg-1
carb.output$DIC <- carb.ouptput$DIC*1000000 #convert to µmol kg-1
carb.output
View(carb.output)
#Calculate CO2 parameters using seacarb
carb.output <- carb(flag=8, var1=SW.chem$pH.Total, var2=SW.chem$TA/1000000, S= SW.chem$Salinity, T=SW.chem$Temperature, P=0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d") #calculate seawater chemistry parameters using seacarb
carb.output$ALK <- carb.output$ALK*1000000 #convert to µmol kg-1
carb.output$CO2 <- carb.output$CO2*1000000 #convert to µmol kg-1
carb.output$HCO3 <- carb.output$HCO3*1000000 #convert to µmol kg-1
carb.output$CO3 <- carb.output$CO3*1000000 #convert to µmol kg-1
carb.output$DIC <- carb.output$DIC*1000000 #convert to µmol kg-1
carb.output
View(carb.output)
write.table(carb.output, "Seawater_Chemistry_Output.csv", sep=",", row.names = FALSE)
